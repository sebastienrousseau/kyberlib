[package]
authors = ["The kyberlib contributors <contact@kyberlib.com>"]
build = "build.rs"
categories = ["algorithms", "cryptography", "wasm", "no-std"]
description = "A Robust Rust Library for CRYSTALS-Kyber Post-Quantum Cryptography."
documentation = "https://docs.rs/kyberlib"
edition = "2018"
exclude = [
    "/.git/*",
    "/.github/*",
    "/.gitignore",
    "/.vscode/*"
]
homepage = "https://kyberlib.com"
include = [
    "/CONTRIBUTING.md",
    "/LICENSE-APACHE",
    "/LICENSE-MIT",
    "/build.rs",
    "/Cargo.toml",
    "/README.md",
    "/src/**",
    "/xtask/**",
]
keywords = ["kyber", "kem", "key-exchange", "kex", "post-quantum"]
license = "MIT OR Apache-2.0"
name = "kyberlib"
readme = "README.md"
repository = "https://github.com/sebastienrousseau/kyberlib"
version = "0.0.3"

[dependencies]
aes = { version = "0.8.4", optional = true }
ctr = { version = "0.9.2", optional = true }
rand_core = { version = "0.6.4",  default-features = false }
sha2 = { version = "0.10.8", optional = true , default-features = false }
wasm-bindgen = { version = "0.2.91", optional = true }

[dev-dependencies]
criterion = "0.5.1"
rand = "0.8.5"

[dependencies.rand]
version = "0.8.5"
default-features = false
features = ["getrandom"]
optional = true

benchmarking = ["criterion"]

[build-dependencies]
cc = {version = "1.0.89", optional = true }
nasm-rs = {version = "0.3.0", optional = true }

[lib]
crate-type = ["cdylib", "rlib"]
name = "kyberlib"
path = "src/lib.rs"

# [[bench]]
# name = "bench"
# harness = false
# path = "benches/bench.rs"

[features]
### Security Levels ###
# Defaults to "kyber768" if none selected
# Will throw a compile-time error if more than one level is chosen
default = ["kyber768"]
# kyber512 = []
kyber768 = []
# kyber1024 = []

[package.metadata.docs.rs]
all-features = true

### Export IND-CPA primitives
# **WARNING** use with caution
hazmat = []

### Additional features ###
# 90s mode uses AES256-CTR and SHA2 as primitives instead
# Uses a bitslice implementation
90s = ["sha2"]

# Fixslice RustCrypto AES implementation offers some additional sidechannel
# attack resistance. Suggest benchmarking for comparison.
90s-fixslice = ["90s", "aes", "ctr"]

# Use avx2 intrinsics on x86 architectures
# Wont compile if the platform doesn't support it
avx2 = ["cc"]

# For compiling to wasm targets
wasm = ["wasm-bindgen", "getrandom", "rand"]

# Uses Netwide Assembler avx2 code instead of GAS, this offers increased
# portability, you will need a nasm compiler installed.
# Can be downloaded from https://www.nasm.us/
nasm = ["nasm-rs", "avx2"]

# Enable std library support
std = []

[workspace]
members = ["xtask"]

[profile.dev]
codegen-units = 256
debug = true
debug-assertions = true
incremental = true
lto = false
opt-level = 0
overflow-checks = true
panic = 'unwind'
rpath = false
strip = false

[profile.release]
codegen-units = 1
debug = false
debug-assertions = false
incremental = false
lto = true
opt-level = "s"
overflow-checks = false
panic = "abort"
rpath = false
strip = "symbols"

[profile.test]
codegen-units = 256
debug = true
debug-assertions = true
incremental = true
lto = false
opt-level = 0
overflow-checks = true
rpath = false
strip = false
